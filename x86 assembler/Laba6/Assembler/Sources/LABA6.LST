Turbo Assembler	 Version 3.1	    11/20/23 12:12:36	    Page 1
laba6.asm



      1	0000				     model  SMALL
      2	0000				     stack  100h
      3	0000			     dataseg
      4	0000  0A 0D 45 6E 74 65	72+	     Ask1  db 0Ah,0Dh,'Enter first:$'	     ; приглашение на ввод	    +
      5	      20 66 69 72 73 74	3A+  первого числа
      6	      24
      7	000F  0A 0D 45 6E 74 65	72+	     Ask2  db 0Ah,0Dh,'Enter second:$'	     ; приглашение на ввод	    +
      8	      20 73 65 63 6F 6E	64+  второго числа ;
      9	      3A 24
     10	001F  00			     Zero db 0h				     ; байтовая	переменная = 0
     11	0020  24			     Empty db '$'					     ; переменная	    +
     12				     пустой строки
     13	0021  0B			     Buf1  db 11
     14	0022  ??			     Len1  db ?							     ; длина 1	    +
     15				     строки
     16	0023  64*(??)			 str1 db 100 dup( ? )				     ; буфер 1
     17	0087  0B			 Buf2  db 11
     18	0088  ??			     Len2  db ?							     ; длина 2	    +
     19				     строки
     20	0089  64*(??)			 str2 db 100 dup( ? )				     ; буфер 2
     21	00ED  0A 0D			     AskCont db	0Ah,0Dh
     22	00EF  45 78 69 74 20 2D	20+	     db	'Exit -	Esc, Next - all	'
     23	      45 73 63 2C 20 4E	65+
     24	      78 74 20 2D 20 61	6C+
     25	      6C 20
     26	0106  24			     db	'$'
     27	0107  0A 0D 52 65 73 75	6C+	     ResT  db 0Ah,0Dh,'Result: $'	     ; приглашение на вывод	    +
     28	      74 3A 20 24	     результата
     29	0112  00			     LenR  db 0							     ; длина	    +
     30				     строки результата
     31	0113  64*(??)			 strR db 100 dup( ? )				     ; буфер строки		    +
     32				     результата
     33	0177			     codeseg
     34				     startupcode
1    35	0000			     @Startup:
1    36	0000  BA 0000s			     MOV     DX,@data
1    37	0003  8E DA			     MOV     DS,DX
1    38	0005  8C D3			     MOV     BX,SS
1    39	0007  2B DA			     SUB     BX,DX
1    40	0009  D1 E3 D1 E3 D1 E3	D1+	     SHL     BX,4
     41	      E3
1    42	0011  FA			     CLI
1    43	0012  8E D2			     MOV     SS,DX
1    44	0014  03 E3			     ADD     SP,BX
1    45	0016  FB			     STI
     46
     47	0017			     BEGIN1:
     48	0017  B8 0000s			     mov AX, @DATA			     ; В регистра AX смещение	    +
     49				     для данных
     50	001A  BA 0000r			     lea  DX, Ask1			     ; в DX занести адрес строки
     51	001D  B4 09			     mov  AH, 09h			     ; в АН занести номер	    +
     52				     функции (вывод)
     53	001F  CD 21			     int  21h					     ; вызов прерывания
     54
     55	0021  BA 0021r			 lea DX, Buf1				     ; Ввод	первой строки
     56	0024  B4 0A			 mov AH, 0Ah
     57	0026  CD 21			 int 21h
Turbo Assembler	 Version 3.1	    11/20/23 12:12:36	    Page 2
laba6.asm



     58
     59	0028  80 3E 0022r 00		     cmp  Len1,	0			     ; сравниваем длину строки +
     60				     1 с нулем
     61	002D  74 E8			     je	 BEGIN1					     ; если	равен нулю, то   +
     62				     вводим заново
     63
     64	002F			     BEGIN2:
     65	002F  BA 000Fr			     lea  DX, Ask2			     ; в DX занести адрес строки
     66	0032  B4 09			     mov  AH, 09h			     ; в АН занести номер	    +
     67				     функции (вывод)
     68	0034  CD 21			     int  21h					     ; вызов прерывания
     69
     70	0036  BA 0087r			 lea DX, Buf2				     ; Ввод	второй строки
     71	0039  B4 0A			 mov AH, 0Ah
     72	003B  CD 21			 int 21h
     73
     74	003D  80 3E 0088r 00		     cmp  Len2,	0			     ; сравниваем длину строки +
     75				     2 с нулем
     76	0042  74 EB			     je	 BEGIN2					     ; если	равен нулю, то   +
     77				     вводим заново
     78
     79	0044  33 C9			     xor CX, CX					     ; обнуляем	CX
     80	0046  33 DB			     xor BX, BX					     ; обнуляем	BX
     81	0048  33 C0			     xor AX, AX					     ; обнуляем	AX
     82	004A  BB 0023r			     lea BX, str1			     ; загружаем в BX	srt1
     83	004D  8A 0E 0022r		     mov CL, Len1			     ; загружаем в CL	длину	    +
     84				     первой строки
     85	0051  BF 0000			     mov DI, 0					     ; DI = 0
     86	0054			     LOOP_STR:
     87	0054  8A 01			     mov AL, [BX][DI]			     ; загружаем текущий	    +
     88				     символ из str1 в AL
     89	0056  BE 0089r			 lea SI, str2				     ; устанавливаем SI на	    +
     90				     начало str2
     91
     92	0059  E8 0047			 call remove_char		     ; вызываем	подпрограмму remove_char
     93
     94	005C  47			 inc DI						     ; увеличиваем BX для	    +
     95				     перехода к следующему символу str1
     96	005D  E2 F5			 loop LOOP_STR				     ; продолжаем цикл, пока не +
     97				     обработаем все символы
     98
     99	005F  BA 0107r			     lea     DX, ResT			     ; Вывод продложения для	    +
    100				     результата
    101	0062  B4 09			     mov     AH, 09h
    102	0064  CD 21			     int     21h
    103
    104	0066  33 D2			     xor DX,DX					     ; обнуляем	регистр DX
    105	0068  8A 16 0112r		     mov DL, LenR			     ; в DL загружаем	длину	    +
    106				     строки результата
    107	006C  3A 16 001Fr		     cmp DL, Zero			     ; сравниваем длину строки +
    108				     результата с нулем
    109	0070  74 03			     je	output1					     ; если	длина = 0		    +
    110				     выводим пустую строку
    111	0072  EB 0D 90			     jmp output2				     ; если	длина != 0		    +
    112				     выводим результат
    113
    114	0075			     output1:						     ; Вывод пустой строки
Turbo Assembler	 Version 3.1	    11/20/23 12:12:36	    Page 3
laba6.asm



    115	0075  33 D2			     xor DX,DX
    116	0077  BA 0020r			     lea DX, Empty
    117	007A  B4 09			 mov AH, 09h
    118	007C  CD 21			 int 21h
    119	007E  EB 0A 90			     jmp CONTINUATION
    120
    121	0081			     output2:						     ; Вывод результата	    +
    122				     после	удаления символов
    123	0081  33 D2			     xor DX,DX
    124	0083  BA 0089r			 lea DX, str2
    125	0086  B4 09			 mov AH, 09h
    126	0088  CD 21			 int 21h
    127
    128
    129	008A			     CONTINUATION:				     ;Запрос на	продолжение	    +
    130				     работы
    131	008A  33 D2			     xor DX,DX
    132	008C  BA 00EDr			     lea     DX, AskCont
    133	008F  B4 09			     mov     AH, 09h
    134	0091  CD 21			     int     21h
    135	0093  B4 08			     mov     AH, 08h
    136	0095  CD 21			     int     21h
    137	0097  3C 1B			     cmp     AL, 27			     ;ESC
    138	0099  74 03			     je	     QUIT
    139	009B  E9 FF79			     jmp     BEGIN1			     ;Конец работы
    140	009E			     QUIT:
    141				     exitcode  0
1   142	009E  B8 4C00			     MOV     AX,04C00h
1   143	00A1  CD 21			     INT     21h
    144
    145				     ; Процедура remove_char
    146				     ; Удаляет все вхождения	определенного символа из	    +
    147				     строки str1 и сохраняет результат	в str2
    148				     ; Вход:
    149				     ;	 - str1: исходная строка,	из которой нужно удалить	    +
    150				     символ
    151				     ;	 - Len1: длина исходной строки str1
    152				     ;	 - AL: символ, который нужно удалить из str1
    153				     ; Выход:
    154				     ;	 - str2: результат удаления символа из str1
    155				     ;	 - LenR: обновленная	длина строки	str2
    156				     ; Регистры:
    157				     ;	 - Используемые регистры: SI, DI, CX, BX, AL, DL
    158				     ;	 - Измененные	регистры: SI, DI, CX, BX, AL, DL
    159				     ;	 - Сохраненные регистры: BX,	CX
    160	00A3			     remove_char proc near
    161	00A3  51			     push CX				     ; Сохраняем регистр CX
    162	00A4  57			 push DI				     ; Сохраняем регистр DI
    163	00A5  53			 push BX				     ; Сохраняем регистр BX
    164
    165	00A6  33 C9			 xor CX, CX			     ; CX будет счетчиком	для		    +
    166				     подсчета удаленных символов
    167	00A8  BF 0000			 mov DI, 0			     ; DI будет указывать	на текущий +
    168				     символ для проверки
    169	00AB  33 D2			 xor DX, DX				     ; обнуляем	регистр DX
    170	00AD  B4 00			     mov AH, 0					     ; заносим 0	в регистр   +
    171				     AH, для	счета длины новой строки
Turbo Assembler	 Version 3.1	    11/20/23 12:12:36	    Page 4
laba6.asm



    172	00AF  BB 0113r			 lea BX, strR			     ; BX будет указывать	на текущий +
    173				     символ для записи
    174	00B2  8A 0E 0088r		 mov CL, Len2				     ; загружаем в CL	длину	    +
    175				     второй строки
    176
    177	00B6				 remove_loop:
    178	00B6  8A 14				     mov DL, byte ptr[SI]    ; в DL заносим текущий символ	    +
    179				     строки
    180	00B8  3A C2				     cmp AL, DL				     ; сравниваем символы  +
    181				     первой и второй строки
    182	00BA  74 05				     je	skip_char		     ; если	равны переходим по  +
    183				     метке
    184	00BC  88 11				     mov [BX][DI], DL
    185	00BE  47				     inc DI
    186	00BF  FE C4				     inc AH
    187
    188	00C1				     skip_char:
    189	00C1  46				     inc SI
    190	00C2  E2 F2				     loop remove_loop
    191	00C4				 remove_done:
    192	00C4  88 26 0112r			     mov LenR, AH
    193	00C8  3A 26 001Fr			     cmp AH, Zero		     ; сравниваем длину новой   +
    194				     строки с нулем
    195	00CC  74 03				     je	next				     ; если	длина = 0 то	    +
    196				     выходим из подпрограммы, освобождая	стек
    197	00CE  E8 0004				     call copy_str		     ; иначе меняем местами str2  +
    198				     и	strR
    199	00D1				     next:
    200	00D1  5B				     pop BX			     ; Восстанавливаем регистр+
    201				     BX
    202	00D2  5F				     pop DI			     ; Восстанавливаем регистр+
    203				     DI
    204	00D3  59				     pop CX			     ; Восстанавливаем регистр+
    205				     CX
    206	00D4  C3				     ret
    207	00D5			     remove_char endp
    208
    209				     ; Процедура copy_str
    210				     ; Копирует	содержимое строки strR в строку str2 и		    +
    211				     обновляет	её длину
    212				     ; Вход:
    213				     ;	 - strR: исходная строка,	которую нужно скопировать
    214				     ;	 - LenR: длина исходной строки strR
    215				     ; Выход:
    216				     ;	 - str2: копия строки strR
    217				     ;	 - Len2: обновленная	длина строки	str2
    218				     ; Регистры:
    219				     ;	 - Используемые регистры: SI, DI, CX, AL, DL
    220				     ;	 - Измененные	регистры: SI, DI, CX, DL
    221				     ;	 - Сохраненные регистры: CX
    222				     ; Примечание: Строки str2 и strR должны быть null-terminated, т.е.+
    223				     завершаться символом '$'
    224	00D5			     copy_str proc near
    225	00D5  51		     push CX
    226	00D6  BE 0089r			 lea SI, str2			     ; устанавливаем SI на начало str2
    227	00D9  BF 0113r			 lea DI, strR			     ; устанавливаем DI на начало strR
    228	00DC  33 C9			 xor CX, CX			     ; обнуляем	счетчик
Turbo Assembler	 Version 3.1	    11/20/23 12:12:36	    Page 5
laba6.asm



    229	00DE  8A 0E 0112r		     mov CL, LenR			     ; загружаем в регистр CX	    +
    230				     длину	strR
    231
    232	00E2			     COPY_LOOP:
    233	00E2  8A 05			 mov AL, [DI]			     ; загружаем текущий символ из  +
    234				     str2 в AL
    235	00E4  88 04			 mov [SI], AL			     ; копируем	символ в	strR
    236	00E6  46			 inc SI				     ; увеличиваем SI для	перехода к +
    237				     следующему символу str2
    238	00E7  47			 inc DI				     ; увеличиваем DI для	перехода к +
    239				     следующему символу strR
    240
    241	00E8  E2 F8			 loop COPY_LOOP			     ; продолжаем цикл
    242
    243	00EA			     COPY_DONE:
    244	00EA  8A 16 0112r		 mov DL, LenR				     ; заменяем	значение длины +
    245				     второй строки на новое значение
    246	00EE  88 16 0088r		     mov Len2, DL
    247	00F2  C6 04 24			     mov byte ptr [SI],	'$'	     ; устанавливаем знак		    +
    248				     завершения строки в конце str2
    249	00F5  59			     pop CX
    250	00F6  C3			     ret
    251	00F7			     copy_str endp
    252				     end
Turbo Assembler	 Version 3.1	    11/20/23 12:12:36	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "11/20/23"
??FILENAME			  Text	 "laba6	  "
??TIME				  Text	 "12:12:36"
??VERSION			  Number 030A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 LABA6
@INTERFACE			  Text	 00H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@STARTUP			  Near	 _TEXT:0000
@WORDSIZE			  Text	 2
ASK1				  Byte	 DGROUP:0000
ASK2				  Byte	 DGROUP:000F
ASKCONT				  Byte	 DGROUP:00ED
BEGIN1				  Near	 _TEXT:0017
BEGIN2				  Near	 _TEXT:002F
BUF1				  Byte	 DGROUP:0021
BUF2				  Byte	 DGROUP:0087
CONTINUATION			  Near	 _TEXT:008A
COPY_DONE			  Near	 _TEXT:00EA
COPY_LOOP			  Near	 _TEXT:00E2
COPY_STR			  Near	 _TEXT:00D5
EMPTY				  Byte	 DGROUP:0020
LEN1				  Byte	 DGROUP:0022
LEN2				  Byte	 DGROUP:0088
LENR				  Byte	 DGROUP:0112
LOOP_STR			  Near	 _TEXT:0054
NEXT				  Near	 _TEXT:00D1
OUTPUT1				  Near	 _TEXT:0075
OUTPUT2				  Near	 _TEXT:0081
QUIT				  Near	 _TEXT:009E
REMOVE_CHAR			  Near	 _TEXT:00A3
REMOVE_DONE			  Near	 _TEXT:00C4
REMOVE_LOOP			  Near	 _TEXT:00B6
REST				  Byte	 DGROUP:0107
SKIP_CHAR			  Near	 _TEXT:00C1
STR1				  Byte	 DGROUP:0023
STR2				  Byte	 DGROUP:0089
STRR				  Byte	 DGROUP:0113
ZERO				  Byte	 DGROUP:001F

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0100 Para	  Stack	  STACK
  _DATA				  16  0177 Word	  Public  DATA
_TEXT				  16  00F7 Word	  Public  CODE
